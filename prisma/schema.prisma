generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
    id          Int           @id @default(autoincrement())
    name        String        @db.VarChar()
    nickName    String        @db.VarChar()
    email       String        @unique @db.VarChar(32)
    password    String        @db.VarChar(255)
    role        UserCategory  @default(GUEST)
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    userProduct UserProduct[]
    session     Session[]
    post        Post[]
    comment     Comment[]
    news        News[]
    savedPost   SavedPost[]
    savedNews   SavedNews[]

    @@map("users")
}

enum UserCategory {
    ADMIN
    GUEST
}

model Session {
    id        Int      @id @default(autoincrement())
    userId    Int
    user      User     @relation(fields: [userId], references: [id])
    token     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("sessions")
}

model Product {
    id        Int      @id @default(autoincrement())
    name      String   @db.VarChar()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userProduct     UserProduct[]
    practiceProduct PracticeProduct[]
    tags            Tags[]

    @@map("products")
}

model UserProduct {
    id        Int      @id @default(autoincrement())
    userId    Int
    productId Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user    User    @relation(fields: [userId], references: [id])
    product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@unique([userId, productId], name: "userId_productId")
    @@map("userProducts")
}

model Practice {
    id        Int      @id @default(autoincrement())
    name      String   @db.VarChar()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    practiceAdvantage PracticeAdvantage[]
    practiceProduct   PracticeProduct[]

    @@map("practices")
}

model PracticeAdvantage {
    id          Int      @id @default(autoincrement())
    advantage   String   @db.VarChar()
    description String   @db.VarChar()
    practiceId  Int      @unique
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    practice Practice @relation(fields: [practiceId], references: [id])

    @@map("practiceAdvantages")
}

model PracticeProduct {
    id         Int      @id @default(autoincrement())
    productId  Int
    practiceId Int
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    product  Product  @relation(fields: [productId], references: [id])
    practice Practice @relation(fields: [practiceId], references: [id])

    @@map("practiceProducts")
}

enum ForumCategory {
    HELP
    NEWS
    DISCUTIONS
}

model Forum {
    category  ForumCategory @id
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt

    post Post[]

    @@map("forum")
}

model Post {
    id            Int           @id @default(autoincrement())
    title         String        @db.VarChar(64)
    text          String        @db.VarChar(255)
    author        Int
    forumCategory ForumCategory
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt

    user      User        @relation(fields: [author], references: [id])
    forum     Forum       @relation(fields: [forumCategory], references: [category])
    comment   Comment[]
    tags      Tags[]
    savedPost SavedPost[]

    @@map("posts")
}

model Comment {
    id        Int      @id @default(autoincrement())
    text      String   @db.VarChar(128)
    userId    Int
    postId    Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id])
    post Post @relation(fields: [postId], references: [id])

    @@map("comments")
}

model Tags {
    id        Int @id @default(autoincrement())
    postId    Int
    productId Int

    post    Post    @relation(fields: [postId], references: [id])
    product Product @relation(fields: [productId], references: [id])

    @@map("tags")
}

model News {
    id        Int      @id @default(autoincrement())
    title     String
    text      String
    source    String
    author    Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user      User        @relation(fields: [author], references: [id])
    savedNews SavedNews[]

    @@map("news")
}

model SavedPost {
    id     Int @id @default(autoincrement())
    userId Int
    postId Int

    user User @relation(fields: [userId], references: [id])
    post Post @relation(fields: [postId], references: [id])

    @@unique([userId, postId], name: "saved_post_user_id_post_id")
    @@map("savedPosts")
}

model SavedNews {
    id     Int @id @default(autoincrement())
    userId Int
    newsId Int

    user User @relation(fields: [userId], references: [id])
    news News @relation(fields: [newsId], references: [id])

    @@unique([userId, newsId], name: "saved_news_user_id_newsId")
    @@map("savedNews")
}
